The ``add_integer`` module
==========================

Using ``add_integer``
--------------------------

Importing the add_integer function to test

>>> add_integer = __import__('0-add_integer').add_integer

--------------------------
Begin test cases:

>>> add_integer(1, 2)
3

>>> add_integer(2, 1)
3

>>> add_integer(2, -1)
1

>>> add_integer(-1, -1)
-2

>>> add_integer(0, -1)
-1

>>> add_integer(0, 0)
0

>>> add_integer()
Traceback (most recent call last):
    ...
TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

>>> add_integer(bah, dope)
Traceback (most recent call last):
    ...
NameError: name 'bah' is not defined

>>> add_integer(1.5, 3)
4

>>> add_integer(1, 3.5)
4

>>> add_integer(2.5, 2.5)
4

>>> add_integer(2.5, -2.5)
0

>>> add_integer(-2.5, 2.5)
0

>>> add_integer(-2.5, -2.5)
-4

>>> add_integer("lo", "bo")
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer("lo", -)
Traceback (most recent call last):
    ...
SyntaxError: invalid syntax

>>> add_integer("lo", 4, 4)
Traceback (most recent call last):
    ...
TypeError: add_integer() takes 2 positional arguments but 3 were given

>>> add_integer(-True, -False)
-1

>>> add_integer(-True, False)
-1

>>> add_integer(True, -False)
1

>>> add_integer(True, False)
1

>>> add_integer(None, None)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer("string", 4.5)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer(4, "bo")
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add_integer(9999999999999999999999999999999999, 1)
10000000000000000000000000000000000

>>> add_integer([1, 2, 3], 5)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer({4}, 42, "bacon")
Traceback (most recent call last):
    ...
TypeError: add_integer() takes 2 positional arguments but 3 were given
